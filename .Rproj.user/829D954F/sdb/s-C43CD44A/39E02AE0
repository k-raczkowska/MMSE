{
    "collab_server" : "",
    "contents" : "mydb = RMySQL::dbConnect(RMySQL::MySQL(), user = 'root', password = 'master', dbname = 'travistorrent', host = 'localhost')\nqueryResult = DBI::dbGetQuery(mydb, \"select tr_build_id, tr_status, author_mail, git_commit, gh_project_name from travistorrent_27_10_2016 order by tr_build_id\")\nsave(queryResult, file = \"queryRes.rda\")\n\nload(file = 'queryRes.rda')\n\nlcpa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  data <- projectBuilds[projectBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  print(c)\n  count = 0\n  max = 0\n  for(i in 1:c){\n    print(data[i,2])\n    if(data[i,2] == 'passed'){\n      count = count + 1\n    }\n    else\n      count = 0\n    if(count > max){\n      max = count\n    }\n  }\n  print(max)\n  return(max)\n}\n\nlcfa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  data <- projectBuilds[projectBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  print(c)\n  count = 0\n  max = 0\n  for(i in 1:c){\n    print(data[i,2])\n    if(data[i,2] == 'failed' || data[i,2] == 'errored'){\n      count = count + 1\n    }\n    else\n      count = 0\n    if(count > max){\n      max = count\n    }\n  }\n  print(max)\n  return(max)\n}\n\nscpa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  data <- projectBuilds[projectBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  count = 0\n  min = c+1\n  for(i in 1:c){\n    if(data[i,2] == 'passed'){\n      count = count + 1\n    }\n    else{\n      if((count < min && count != 0)){\n        min = count\n      }\n      count = 0\n    }\n  }\n\n  if(min == c+1){\n    min = count\n  }\n  return(min)\n}\n\nscfa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  data <- projectBuilds[projectBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  count = 0\n  min = c+1\n  for(i in 1:c){\n    if(data[i,2] == 'failed' || data[i,2] == 'errored'){\n      count = count + 1\n    }\n    else{\n      if((count < min && count != 0)){\n        min = count\n      }\n      count = 0\n    }\n  }\n\n  if(min == c+1){\n    min = count\n  }\n  return(min)\n}\n\nlccfa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  committer <- head(queryResult[queryResult$tr_build_id == currentBuild,]$author_mail,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  committerBuilds <- queryResult[queryResult$author_mail == committer,]\n  data <- committerBuilds[committerBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  #print(c)\n  count = 0\n  max = 0\n  for(i in 1:c){\n    #print(data[i,2])\n    if(data[i,2] == 'failed' || data[i,2] == 'errored'){\n      count = count + 1\n    }\n    else\n      count = 0\n    if(count > max){\n      max = count\n    }\n  }\n  #print(max)\n  return(max)\n}\n\nlccpa <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  committer <- head(queryResult[queryResult$tr_build_id == currentBuild,]$author_mail,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  committerBuilds <- queryResult[queryResult$author_mail == committer,]\n  data <- committerBuilds[committerBuilds$tr_build_id < currentBuild,]\n  c = nrow(data)\n  #print(c)\n  count = 0\n  max = 0\n  for(i in 1:c){\n    #print(data[i,2])\n    if(data[i,2] == 'passed'){\n      count = count + 1\n    }\n    else\n      count = 0\n    if(count > max){\n      max = count\n    }\n  }\n  #print(max)\n  return(max)\n}\n\ntlb <- function(currentBuild){\n  projectName <- head(queryResult[queryResult$tr_build_id == currentBuild,]$gh_project_name,1)\n  projectBuilds <- queryResult[queryResult$gh_project_name == projectName,]\n  passed <- projectBuilds[projectBuilds$tr_status == 'passed',]\n  data <- passed[passed$tr_build_id < currentBuild,]\n  x = difftime(Sys.Date(), strptime(data, format = \"%Y-%m-%d\"), units = \"minutes\")\n  y = as.numeric(x, units=\"minutes\")\n  return(y)\n}\n\nlcpa(1763098)\n",
    "created" : 1485301464775.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1918822373",
    "id" : "39E02AE0",
    "lastKnownWriteTime" : 1485301160,
    "last_content_update" : 1485301160,
    "path" : "~/MetricsR/R/hello.R",
    "project_path" : "R/hello.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}